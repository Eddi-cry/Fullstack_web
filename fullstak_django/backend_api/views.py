from django.shortcuts import get_object_or_404
from rest_framework.decorators import api_view, permission_classes
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import AllowAny
from datetime import datetime
import os
import tarfile
from django.conf import settings
from .models import File, Station
import uuid
import tempfile
from .serializer import FileSerializer, StationSerializer

import paramiko
import traceback


class StationFilesView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        stations = request.data.get('stations', [])
        start_date_str = request.data.get('startDate')
        end_date_str = request.data.get('endDate')

        if not stations:
            return Response(
                {"error": "–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Å—Ç–∞–Ω—Ü–∏–∏"},
                status=status.HTTP_400_BAD_REQUEST
            )

        if not start_date_str or not end_date_str:
            return Response(
                {"error": "–£–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—ã"},
                status=status.HTTP_400_BAD_REQUEST
            )

        try:
            start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
            end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date()

            result = {}
            for station_name in stations:
                try:
                    stations_qs = Station.objects.filter(staname__iexact=station_name)

                    if not stations_qs.exists():
                        result[station_name] = {"error": f"–°—Ç–∞–Ω—Ü–∏—è '{station_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
                        continue

                    station_files = []
                    for station in stations_qs:
                        files = File.objects.filter(
                            staid=station.staid,
                            date__gte=start_date,
                            date__lte=end_date
                        ).select_related('staid')

                        serializer = FileSerializer(files, many=True)
                        station_files.extend(serializer.data)

                    result[station_name] = station_files if station_files else []

                except Exception as e:
                    result[station_name] = {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–Ω—Ü–∏–∏: {str(e)}"}

            return Response(result, status=status.HTTP_200_OK)

        except ValueError as e:
            return Response(
                {"error": f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD"},
                status=status.HTTP_400_BAD_REQUEST
            )
        except Exception as e:
            return Response(
                {"error": f"–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSH
SSH_HOST = "172.20.1.177"
SSH_PORT = 22
SSH_USERNAME = "volichevm"
SSH_PASSWORD = "DVnm34_E$T"

# –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
REMOTE_BASE_PATH = "/home/volichevm/"


class DownloadArchiveView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        stations = request.data.get('stations', [])
        start_date_str = request.data.get('startDate')
        end_date_str = request.data.get('endDate')

        if not stations:
            return Response({"error": "–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Å—Ç–∞–Ω—Ü–∏–∏"}, status=status.HTTP_400_BAD_REQUEST)

        if not start_date_str or not end_date_str:
            return Response({"error": "–£–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—ã"}, status=status.HTTP_400_BAD_REQUEST)

        try:
            start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
            end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date()

            if start_date > end_date:
                return Response(
                    {"error": "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è"},
                    status=status.HTTP_400_BAD_REQUEST
                )

            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(SSH_HOST, port=SSH_PORT, username=SSH_USERNAME, password=SSH_PASSWORD)
            sftp = ssh.open_sftp()

            with tempfile.TemporaryDirectory() as tmp_dir:
                tar_filename = f'gnss_data_{start_date}_{end_date}_{uuid.uuid4().hex[:6]}.tar.gz'
                tar_path = os.path.join(settings.MEDIA_ROOT, tar_filename)

                with tarfile.open(tar_path, 'w:gz') as tar:
                    file_count = 0

                    for station_name in stations:
                        stations_qs = Station.objects.filter(staname__iexact=station_name)
                        if not stations_qs.exists():
                            continue

                        for station in stations_qs:
                            files = File.objects.filter(
                                staid=station.staid,
                                date__gte=start_date,
                                date__lte=end_date
                            ).select_related('staid')

                            for file in files:
                                remote_path = os.path.join(
                                    file.path,
                                    file.filename
                                )

                                print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {remote_path}")
                                local_file_path = os.path.join(tmp_dir, f"{station.staname}_{file.date}_{file.filename}")

                                try:
                                    sftp.stat(remote_path)
                                    sftp.get(remote_path, local_file_path)

                                    if os.path.exists(local_file_path):
                                        arcname = os.path.join(
                                            file.staid.staname.upper(),
                                            file.date.strftime('%Y-%m-%d'),
                                            file.filename
                                        )
                                        tar.add(local_file_path, arcname=arcname)
                                        file_count += 1
                                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {arcname}")
                                    else:
                                        print(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω: {local_file_path}")

                                except FileNotFoundError:
                                    print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {remote_path}")
                                except Exception as e:
                                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {remote_path}: {str(e)}")

                    # ‚úÖ –Ø–≤–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
                    tar.close()

                # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º sftp –∏ ssh
                sftp.close()
                ssh.close()

                if file_count == 0:
                    os.remove(tar_path)
                    return Response(
                        {'error': '–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å'},
                        status=status.HTTP_404_NOT_FOUND
                    )

                # ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ Content-Disposition
                return Response({
                    'success': True,
                    'download_url': request.build_absolute_uri(f"/media/{tar_filename}"),
                    'file_count': file_count,
                    'archive_name': tar_filename,
                    'stations': stations,
                    'period': f"{start_date} - {end_date}",
                }, status=status.HTTP_200_OK)

        except Exception as e:
            traceback.print_exc()
            return Response(
                {"error": f"–û—à–∏–±–∫–∞: {str(e)}"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
